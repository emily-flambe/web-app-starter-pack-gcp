name: PR Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ARTIFACT_REGISTRY_LOCATION: us-central1
  ARTIFACT_REGISTRY_REPO: cloud-run-apps

jobs:
  deploy-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    # Optional: Only deploy previews for PRs with a specific label
    # if: contains(github.event.pull_request.labels.*.name, 'preview')
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write  # To comment on PR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate preview service name
        id: preview
        run: |
          # Create a unique service name for this PR (max 63 chars for Cloud Run)
          PREVIEW_NAME="hello-world-pr-${{ github.event.pull_request.number }}"
          echo "service_name=${PREVIEW_NAME}" >> $GITHUB_OUTPUT

      - name: Setup Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev

      - name: Build and Push Docker image
        run: |
          IMAGE_URL="${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ steps.preview.outputs.service_name }}"
          
          docker build \
            --platform linux/amd64 \
            --tag ${IMAGE_URL}:${{ github.event.pull_request.head.sha }} \
            .
          
          docker push ${IMAGE_URL}:${{ github.event.pull_request.head.sha }}

      - name: Deploy Preview to Cloud Run
        id: deploy
        run: |
          IMAGE_URL="${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ steps.preview.outputs.service_name }}:${{ github.event.pull_request.head.sha }}"
          
          gcloud run deploy ${{ steps.preview.outputs.service_name }} \
            --image ${IMAGE_URL} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --max-instances 2 \
            --labels environment=preview,pr=${{ github.event.pull_request.number }} \
            --project ${{ env.PROJECT_ID }}
          
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ steps.preview.outputs.service_name }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --format 'value(status.url)')
          
          echo "preview_url=${SERVICE_URL}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.preview_url }}';
            const body = `ðŸš€ **Preview Environment Ready!**
            
            Your changes have been deployed to: ${url}
            
            This preview will be automatically cleaned up when the PR is closed.
            
            | Details | |
            |---------|---------|
            | Preview URL | ${url} |
            | Commit | \`${{ github.event.pull_request.head.sha }}\` |
            | Service | \`${{ steps.preview.outputs.service_name }}\` |
            `;
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Environment Ready')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

  cleanup-preview:
    name: Cleanup PR Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Generate preview service name
        id: preview
        run: |
          PREVIEW_NAME="hello-world-pr-${{ github.event.pull_request.number }}"
          echo "service_name=${PREVIEW_NAME}" >> $GITHUB_OUTPUT

      - name: Setup Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Delete preview service
        run: |
          gcloud run services delete ${{ steps.preview.outputs.service_name }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --quiet || echo "Service already deleted or doesn't exist"